                                                 //解构赋值
//介绍两种概念迭代器与生成器
//首先介绍一下迭代器：


//数组的解构赋值:这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。
//以前为变量赋值，只能直接指定值
let a=1;
let b=2;
let c=3;
//ES6允许写成下面这样
let [a,b,c]=[1,2,3];
//如果解构不成功，变量的值就等于undefined
let [foo]=[];
let [bar,foo]=[1];
//以上的两种情况，foo的值都会等于undefined
//另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。
let [x, y] = [1, 2, 3];
x // 1
y // 2
let [a, [b], d] = [1, [2, 3], 4];
a // 1
b // 2
d // 4
//上面两个例子，都属于不完全解构，但是可以成功。
//如果等号的右边不是数组将会报错
// 报错
let [foo] = 1;
let [foo] = false;
let [foo] = NaN;
let [foo] = undefined;
let [foo] = null;
let [foo] = {};
//对于 Set 结构，也可以使用数组的解构赋值。
let [x, y, z] = new Set(['a', 'b', 'c']);
x // "a"

//对象的解构赋值
let {foo,bar}={foo:'aaa',bar:'bbb'}
foo //'aaa';
bar //'bbb'
//对象的解构赋值与数组有一个重要的不同，数组是按照次序排列，变量的取指由它的位置决定，
//对象的取值没有次序变量名必须与属性名一致才能取到正确的值
let {foo}={bar:'aaa'};
foo //undifined
//字符串的解构赋值
const[a,b,c,d,e]='hello'
a // "h"
b // "e"
c // "l"
d // "l"
e // "o"